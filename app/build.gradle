apply plugin: 'com.android.application'
//apply plugin: 'com.jakewharton.hugo'

def bakPath = file("${buildDir}/bakFile/")
def bakFiles = ["mapping.txt", "resources.txt", "seeds.txt", "usage.txt"]
def express = rootProject.ext.express

//获取产品的名字
def getProductName() {
  return "express_service_v" + rootProject.ext.app.versionName + "${getJenkinsBuild()}"
}

//获取当前系统的时间
static def releaseTime() {
  return new Date().format("MMdd")
}

static boolean isInJeknins() {
  Map<String, String> map = System.getenv()
  if (map == null) {
    return false
  }
  String str
  Iterator it = map.iterator()
  while (it.hasNext()) {
    str = it.next()
    if (str.contains("jenkins")) {
      return true
    }
  }
  return false
}

//获取jenkins build number
def getJenkinsBuild() {
  boolean flag = isInJeknins()
  if (flag) {
    ext.env = System.getenv()
    ext.buildNumber = env.get("BUILD_NUMBER")
    return "#" + "$buildNumber"
  } else {
    return ""
  }
}

def getProductProps(String product) {
  Properties props = new Properties()
  def proFile = file('products/' + product + '/config.properties')
  if (proFile.canRead()) {
    props.load(new FileInputStream(proFile))
  }
  props
}

def getProductVersionName() {
  String customVersionName = rootProject.ext.app.versionName
  boolean flag = isInJeknins()
  String versionName
  if (flag) {
    versionName = customVersionName + "${getJenkinsBuild()}"
  } else {
    def currentBranchName = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    versionName = customVersionName + "_${currentBranchName}" + "_${releaseTime()}"
  }
  return versionName
}

android {
  compileSdkVersion rootProject.ext.android.compileSdkVersion
  buildToolsVersion rootProject.ext.android.buildToolsVersion
  defaultConfig {
    applicationId "com.ubtrobot.expressservice"
    minSdkVersion rootProject.ext.android.minSdkVersion
    targetSdkVersion rootProject.ext.android.targetSdkVersion
    versionCode rootProject.ext.app.versionCode
    versionName rootProject.ext.app.versionName
    multiDexEnabled false
  }

  signingConfigs {
    release {
      storeFile file("rose.keystore")
      storePassword "UBT_Rose_2017"
      keyAlias "roseandoridkey"
      keyPassword "UBT_Rose_2017"
    }

    debug {
      storeFile file("rk-debug.keystore")
      storePassword "ubt83474428"
      keyAlias "androiddebugkey"
      keyPassword "ubt83474428"
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.all {
      outputFileName = "expressservice_${variant.name}_${express.versionName}_${releaseTime()}.apk"
    }
  }

  android.applicationVariants.all { variant ->
    def taskName = variant.name
    tasks.all {
      if ("assemble${taskName}".equalsIgnoreCase(it.name)) {
        it.doLast {
          copy {
            def fileName = getProductName() + "_${releaseTime()}"
            if (variant.productFlavors != null && variant.productFlavors[0] != null) {
              fileName += "_" + variant.productFlavors[0].name
            }

            if (variant.buildType != null) {
              fileName += "_" + variant.buildType.name
            }
            def destPath = bakPath
            def apkName = fileName + ".apk"
            def sourceApk = variant.outputs[0].outputFile
            def sourceApkName = sourceApk.getName()
            from sourceApk
            into destPath

            //备份 apk
            include(sourceApkName)
            rename(sourceApkName, apkName)

            //备份混淆文件
            from "${buildDir}/outputs/mapping/${variant.dirName}/"
            into destPath
            for (bakFileName in bakFiles) {
              include(bakFileName)
              rename(bakFileName, fileName + "_" + bakFileName)
            }
          }
        }
      }
    }
  }

  buildTypes {
    release {
      manifestPlaceholders = ["CATEGORY": "android.intent.category.DEFAULT"]
      minifyEnabled true
      shrinkResources true
      if (!isInJeknins()) {
        signingConfig signingConfigs.release
      }
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }

    debug {
      manifestPlaceholders = ["CATEGORY": "android.intent.category.LAUNCHER"]
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
    ignoreWarnings true
  }

  flavorDimensions 'default'
  productFlavors {
    mini {
      applicationId "com.ubtrobot.mini.expressservice"
      versionName getProductVersionName()
      buildConfigField "Boolean", "SDResourceEnable",
          rootProject.ext.app.useSdcardResource ? "true" : "false"
      ndk {
        abiFilters 'arm64-v8a'
      }
    }
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  def deps = rootProject.ext.deps
  //测试
  testImplementation deps.junit
  testImplementation deps.mockito
  testImplementation(deps.robolectric) {
    exclude group: 'commons-logging', module: 'commons-logging'
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
  }
  implementation deps.supportAnnotations
  implementation deps.timber
  implementation deps.master
  implementation(deps.utillib) {
    exclude group: 'com.google.code.gson', module: 'gson'
    exclude group: 'com.google.guava', module: 'guava'
  }
  implementation deps.ulog
  implementation deps.protobufparam
  //implementation deps.hugo

  implementation project(':express-protos')
  implementation project(':mini:gif-drawable')
  implementation project(':mini:lottie-drawable')
  implementation project(':mini:eye-track-drawable')
  implementation project(':mini:circle-progress-drawable')
  implementation project(':mini:mini-spi')
  implementation deps.properties_sdk
  implementation deps.motionsdk
}